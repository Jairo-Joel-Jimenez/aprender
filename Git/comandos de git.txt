Que es git?
Git es un software de control de versiones que registra 
los cambios realizados sobre un archivo a lo largo del tiempo.
Git nos permite gestionar distintas versiones de un mismo archivo,pudiendo
volver a una version anterior o una mas reciente cuando sea necesario.

*Cuando trabajamos con GIT lo que creamos es un REPOSITORIO,es decir,
un lugar donde guardamos y administramos nuestros archivos.
*Existen dos tipos de repositorios
 *LOCALES:Son aquellos que se crean de forma "local" en nuestra PC y que no
  necesariamente son compartidos.
 *REMOTOS:Son quellos que se encuentran alojados en algun servidor externo
  y que puede ser accededido desde cualquier lugar.
  Un ejemplo de repositorio remoto puede ser git-hub,Gitlab,etc.
Link de la pagina oficial de git:https://git-scm.com/
Instalamos una vez finalizado ejecutamos git-bash y escribimos "git version"
si esta correctamente instalado nos dira en la terminal cual es la version
de nuestro GIT.
 *****Lista de comandos al Final del archivo****** 
 Crear cuenta de GitHub: https://github.com/
 Creamos un repositorio en github.
 Usaremos en gitbash 
 como subir a git hub un repositorio
 *git config user.name "nombre de usuario de github" (para configurar el usuario)
 *git config user.email "email del usuario"(para configurar el email)
 *git remote add origin <direccion url del repositorio que nos da github>
 Agregamos un archivo a la carpeta donde tengamos el git
 usamos 
 *git status :para ver los archivos en el repositorio pu
 *git add <nombre del archivo> para agregarlo al repositorio y darle seguimiento.
 *git commit -m <comentario del commit> agremamos de stage la rama el archivo
 *git revert <etiqueta del commit> para revertir los cambios hasta el commit elegido 
 *git push -u origin(repositorio remoto) master<nombre de la rama> agregamos el archivo a github
 *git pull --allow-unrelated-histories <repositorio> <rama> sirve para agregar el seguimiento remoto desde otra pc
 *git config user.password <token de github> no compartir el token
*Asi como podemos enviar un archivo de nuestro repositorio local al remoto
tambien podemos clonar repositorios remotos a nuestro local.
  *git clone <url del repositorio> sirara copiar todo el repositorio si comenzamos desde 0
  *git pull origin(repositorio remoto) master(rama) sirve para una actualizacion puntual del repositorio solo cambios
  RAMAS(branches)
  *Las ramas pueden definirse como punteros  para cada uno de los cambios o
    versiones que queremos armar de nuestro proyecto.
  *Cada rama representa una linea independiente de desarrollo
  *Git cuenta con una rama principal master/main de a cual parten todas las
   demas ramas que se pueden crear
   comandos
  *git branch :nos muestra la rama donde estamos y las demas ramas
  *git branch<nombre de la rama> crea una rama nueva
  *git branch -m <nombreactual> <nombrenuevo> :cambia de nombre una rama
  *git checkout <nombredelarama> :cambia de rama
  *git branch -d <nombredelarama> borra la rama nombrada mientras no estes en la rama.
  *touch "nombre del archivo con extension" crea archivos
  *git diff<primerarama><segundarama> :sirve para ver las diferencias entre ramas 
   el orden de las ramas las compara al reves se sagile con q
  *git merge <rama><master/main> :unifica una rama con la rama principal





 **Sugerencia de comandos**
  https://app.aluracursos.com/forum/topico-sugerencia-lista-de-comandos-basicos-de-git-148965?gclid=Cj0KCQjw4s-kBhDqARIsAN-ipH2dEo7f1um30UJuYGrucSswQz3w_JCR7qpG0LwqDZ7UGS1ESRvxWPQaAkDpEALw_wcB
 *10 comandos de git mas importantes*
  https://www.freecodecamp.org/espanol/news/10-comandos-de-git-que-todo-desarrollador-deberia-saber/
 *pwd:sirve para ver en que ruta estamos actualmente
 *ls:sirve para poder ver carpetas y archivos de la direccion actual
 *cd: sirve para acceder a una carpeta y cd .. sirve para volver
 *git init:sirve para iniciar un git en una carpeta es la rama master
 *git --version (Indica la versión instalada de Git)
 *git config --global user.name "<nombre del usuario que está realizando los cambios>" (Para todos los proyectos que se relizarán)
 *git config --global user.email "<email del usuario que está realizando los cambios>" (Para todos los proyectos que se relizarán)
 *git config --local user.name "<nombre del usuario que está realizando los cambios>" (Solo para el proyeto actual)
 *git config --local user.email "<email del usuario que está realizando los cambios>" (Solo para el proyecto actual)
 *git status:Inspecciona el repositorio para notificar el estado de los archivos.
 *git add <nombre del archivo> añade el archivo al repositorio